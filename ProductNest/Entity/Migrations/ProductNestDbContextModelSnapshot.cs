// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductNest.Entity.Data;

#nullable disable

namespace ProductNest.Entity.Migrations
{
    [DbContext(typeof(ProductNestDbContext))]
    partial class ProductNestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductNest.Entity.BOMItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BomItemId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BOMItem");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.ImageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminGraphqlApiId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<long>("ImageFileId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Src")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("VariantIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ImageFile");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AvailableQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpiredQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<long>("InventoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("QuarantinedQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("RejectedQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ReservedQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.PresentmentPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompareAtPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PredentPriceId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("VariantId");

                    b.ToTable("PresentmentPrice");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrencyCode")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SellingPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.UnitOfMeasure", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("UnitOfMeasure");

                    b.HasData(
                        new
                        {
                            Code = "AI",
                            Name = "Assembled Item"
                        },
                        new
                        {
                            Code = "L",
                            Name = "Liter"
                        },
                        new
                        {
                            Code = "cl",
                            Name = "Centiliter"
                        },
                        new
                        {
                            Code = "ml",
                            Name = "Milliliter"
                        },
                        new
                        {
                            Code = "dl",
                            Name = "Deciliter"
                        },
                        new
                        {
                            Code = "dcl",
                            Name = "Decaliter"
                        },
                        new
                        {
                            Code = "hcl",
                            Name = "Hectoliter"
                        },
                        new
                        {
                            Code = "kl",
                            Name = "Kiloliter"
                        },
                        new
                        {
                            Code = "pt",
                            Name = "Pint"
                        },
                        new
                        {
                            Code = "gll",
                            Name = "Gallon (Metric)"
                        },
                        new
                        {
                            Code = "glim",
                            Name = "Gallon (Imperial)"
                        },
                        new
                        {
                            Code = "mcg",
                            Name = "Microgram"
                        },
                        new
                        {
                            Code = "mg",
                            Name = "Milligram"
                        },
                        new
                        {
                            Code = "g",
                            Name = "Gram"
                        },
                        new
                        {
                            Code = "kg",
                            Name = "Kilogram"
                        },
                        new
                        {
                            Code = "lb",
                            Name = "Pound"
                        },
                        new
                        {
                            Code = "mt",
                            Name = "Metric-Ton"
                        },
                        new
                        {
                            Code = "mm",
                            Name = "Millimeter"
                        },
                        new
                        {
                            Code = "cm",
                            Name = "Centimeter"
                        },
                        new
                        {
                            Code = "dm",
                            Name = "Decimeter"
                        },
                        new
                        {
                            Code = "m",
                            Name = "Meter"
                        },
                        new
                        {
                            Code = "dcm",
                            Name = "Decameter"
                        },
                        new
                        {
                            Code = "hcm",
                            Name = "Hectometer"
                        },
                        new
                        {
                            Code = "km",
                            Name = "Kilometer"
                        },
                        new
                        {
                            Code = "in",
                            Name = "Inch"
                        },
                        new
                        {
                            Code = "ft",
                            Name = "Foot"
                        },
                        new
                        {
                            Code = "yard",
                            Name = "Yard"
                        },
                        new
                        {
                            Code = "SI",
                            Name = "Single Item"
                        },
                        new
                        {
                            Code = "SU",
                            Name = "Single Unit"
                        },
                        new
                        {
                            Code = "t",
                            Name = "Ton"
                        },
                        new
                        {
                            Code = "m2",
                            Name = "Square Meter"
                        },
                        new
                        {
                            Code = "ha",
                            Name = "Hectare"
                        },
                        new
                        {
                            Code = "km2",
                            Name = "Square Kilometer"
                        },
                        new
                        {
                            Code = "cm3",
                            Name = "Cubic Centimeter"
                        },
                        new
                        {
                            Code = "m3",
                            Name = "Cubic Meter"
                        },
                        new
                        {
                            Code = "kg/m3",
                            Name = "Kilogram Per Cubic Meter"
                        },
                        new
                        {
                            Code = "each",
                            Name = "Each"
                        },
                        new
                        {
                            Code = "piece",
                            Name = "Piece"
                        },
                        new
                        {
                            Code = "pair",
                            Name = "Pair"
                        },
                        new
                        {
                            Code = "oz",
                            Name = "Ounce"
                        },
                        new
                        {
                            Code = "floz",
                            Name = "Fluid Ounce"
                        },
                        new
                        {
                            Code = "ac",
                            Name = "Acre"
                        },
                        new
                        {
                            Code = "lot",
                            Name = "Lot"
                        },
                        new
                        {
                            Code = "sin",
                            Name = "Square Inch"
                        },
                        new
                        {
                            Code = "Other",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminGraphqlApiId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompareAtPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FulfillmentService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grams")
                        .HasColumnType("int");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InventoryManagement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InventoryPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OldInventoryQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ParentProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresShipping")
                        .HasColumnType("bit");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("VariantId")
                        .HasColumnType("bigint");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<string>("WeightUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Variant");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.VariantOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VariantOptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("VariantOption");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aisle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shelf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("ProductNest.Entity.Manufacturing.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BOMItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BatchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompletedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentActionState")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReinstated")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProcessType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgressTracking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectJobNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockHandlingProcedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalWorkingDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BOMItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("ProductNest.Entity.Manufacturing.CompletedPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CompletePartId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PartCompleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("CompletedPart");
                });

            modelBuilder.Entity("ProductNest.Entity.Manufacturing.ImpactedComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BOMItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImpactType")
                        .HasColumnType("int");

                    b.Property<long>("ImpactedComponentId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPicked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ImpactedComponent");
                });

            modelBuilder.Entity("ProductNest.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminGraphqlApiId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeadTimeInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.ImageFile", b =>
                {
                    b.HasOne("ProductNest.Entity.Product", null)
                        .WithMany("ImageFiles")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Inventory", b =>
                {
                    b.HasOne("ProductNest.Entity.Entity.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductNest.Entity.Entity.Warehouse", "Warehouse")
                        .WithMany("Inventory")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.PresentmentPrice", b =>
                {
                    b.HasOne("ProductNest.Entity.Entity.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.HasOne("ProductNest.Entity.Entity.Variant", null)
                        .WithMany("PresentmentPrices")
                        .HasForeignKey("VariantId");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Variant", b =>
                {
                    b.HasOne("ProductNest.Entity.Product", null)
                        .WithMany("Variants")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.VariantOption", b =>
                {
                    b.HasOne("ProductNest.Entity.Product", null)
                        .WithMany("Options")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Warehouse", b =>
                {
                    b.HasOne("ProductNest.Entity.Entity.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ProductNest.Entity.Manufacturing.Batch", b =>
                {
                    b.HasOne("ProductNest.Entity.BOMItem", "BOMItem")
                        .WithMany()
                        .HasForeignKey("BOMItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProductNest.Entity.Entity.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProductNest.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProductNest.Entity.Entity.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BOMItem");

                    b.Navigation("Inventory");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ProductNest.Entity.Manufacturing.CompletedPart", b =>
                {
                    b.HasOne("ProductNest.Entity.Manufacturing.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("ProductNest.Entity.Manufacturing.ImpactedComponent", b =>
                {
                    b.HasOne("ProductNest.Entity.Manufacturing.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductNest.Entity.Entity.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductNest.Entity.Entity.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Inventory");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Variant", b =>
                {
                    b.Navigation("PresentmentPrices");
                });

            modelBuilder.Entity("ProductNest.Entity.Entity.Warehouse", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ProductNest.Entity.Product", b =>
                {
                    b.Navigation("ImageFiles");

                    b.Navigation("Options");

                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
