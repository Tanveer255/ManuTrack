
@{
    ViewData["Title"] = "Create";
}

<!-- Main Content -->
<main class="container mx-auto p-4 flex-grow">
    <form id="saveProductForm" class="bg-white shadow-md rounded-lg p-6 space-y-6">
        <!-- Product Details -->
        <section>
            <h2 class="text-xl font-semibold text-gray-700">Product Details</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div>
                    <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
                    <input type="text" id="title" name="title" class="w-full mt-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="vendor" class="block text-sm font-medium text-gray-700">Vendor</label>
                    <input type="text" id="vendor" name="vendor" class="w-full mt-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="productType" class="block text-sm font-medium text-gray-700">Product Type</label>
                    <input type="text" id="productType" name="productType" class="w-full mt-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label>
                    <input type="text" id="tags" name="tags" class="w-full mt-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div class="col-span-full">
                    <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="description" name="description" rows="4" class="w-full mt-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"></textarea>
                </div>
            </div>
        </section>

        <!-- Variants -->
        <section>
            <h2 class="text-xl font-semibold text-gray-700">Variants</h2>
            <div id="variantsContainer" class="mt-4 space-y-4">
                <!-- Add a variant dynamically -->
            </div>
            <button type="button" id="addVariantBtn" class="mt-2 px-4 py-2 bg-blue-500 text-white rounded shadow hover:bg-blue-600">
                Add Variant
            </button>
        </section>

        <!-- Options -->
        <section>
            <h2 class="text-xl font-semibold text-gray-700">Options</h2>
            <div id="optionsContainer" class="mt-4 space-y-4">
                <!-- Add an option dynamically -->
            </div>
            <button type="button" id="addOptionBtn" class="mt-2 px-4 py-2 bg-blue-500 text-white rounded shadow hover:bg-blue-600">
                Add Option
            </button>
        </section>

        <!-- Images -->
        <section>
            <h2 class="text-xl font-semibold text-gray-700">Product Images</h2>
            <div class="mt-4">
                <label for="imageUpload" class="block text-sm font-medium text-gray-700">Upload Images</label>
                <input type="file" id="imageUpload" name="images" multiple class="w-full mt-1 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>
        </section>

        <!-- Submit Button -->
        <div class="text-right">
            <button type="submit" class="px-6 py-3 bg-blue-600 text-white font-semibold rounded-md shadow hover:bg-blue-700">
                Save Product
            </button>
        </div>
    </form>
</main>


<!-- JavaScript for Adding Variants and Options -->
<script>
    document.getElementById('addVariantBtn').addEventListener('click', function () {
        const container = document.getElementById('variantsContainer');
        const variantTemplate = `
            <div class="border border-gray-300 rounded-md p-4 space-y-2">
                <label class="block text-sm font-medium text-gray-700">Variant Name</label>
                <input type="text" name="variantName" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                <label class="block text-sm font-medium text-gray-700">Price</label>
                <input type="text" name="variantPrice" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>`;
        container.insertAdjacentHTML('beforeend', variantTemplate);
    });

    document.getElementById('addOptionBtn').addEventListener('click', function () {
        const container = document.getElementById('optionsContainer');
        const optionTemplate = `
            <div class="border border-gray-300 rounded-md p-4 space-y-2">
                <label class="block text-sm font-medium text-gray-700">Option Name</label>
                <input type="text" name="optionName" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                <label class="block text-sm font-medium text-gray-700">Values (comma-separated)</label>
                <input type="text" name="optionValues" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
            </div>`;
        container.insertAdjacentHTML('beforeend', optionTemplate);
    });
        function saveProduct(product) {
        const url = '/api/products/save'; // Replace with your actual API endpoint

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(product),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('Product saved successfully:', data.message);
                    alert('Product saved successfully!');
                } else {
                    console.error('Error saving product:', data.message);
                    alert('Error saving product: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An unexpected error occurred: ' + error.message);
            });
    }

    // Example usage
    const product = {
        Title: "Sample Product",
        BodyHtml: "<p>Description of the product</p>",
        Vendor: "Sample Vendor",
        ProductType: "Electronics",
        Tags: "Sample,Product,Test",
        Status: "Active",
        ProductId: 1234567890, // Use an existing ID for update or a new one for create
        Name: "Sample Product Name",
        Description: "Detailed description of the product.",
        SKU: "SKU12345",
        UnitOfMeasure: "Piece",
        UnitCost: 49.99,
        StockLevel: 100,
        ReorderLevel: 10,
        LeadTimeInDays: 7,
        Variants: [],
        Options: [],
        ImageFiles: [],
    };

    const variant = {
        VariantId: "", // Generates a unique ID similar to the C# constructor
        ParentProductId: null, // Assign the appropriate Parent Product ID
        ProductId: null, // Assign the appropriate Product ID (if available)
        Price: "19.99", // Example price
        Position: 1, // Example position
        InventoryPolicy: "continue", // Example inventory policy
        CompareAtPrice: "24.99", // Example compare-at price
        Option1: "Red", // Example option
        Option2: "Large", // Example option
        Option3: null, // Set if needed
        Taxable: true, // Example taxable flag
        Barcode: "123456789012", // Example barcode
        FulfillmentService: "manual", // Example fulfillment service
        Grams: 500, // Example weight in grams
        InventoryManagement: "shopify", // Example inventory management
        RequiresShipping: true, // Example shipping requirement
        Sku: "SKU12345", // Example SKU
        Weight: 0.5, // Example weight
        WeightUnit: "kg", // Example weight unit
        InventoryId: null, // Assign appropriate Inventory ID (if available)
        InventoryQuantity: 100, // Example inventory quantity
        OldInventoryQuantity: 90, // Example old inventory quantity
        PresentmentPrices: [], // Array of PresentmentPrice objects, if applicable
        ImageId: null, // Assign appropriate Image ID (if available)
    };
    function generateVariants(productId, options) {
        const variants = [];

        // Helper function to generate combinations of option values
        function combineOptions(options, index, current) {
            if (index === options.length) {
                const variant = {
                    VariantId: Date.now() + variants.length, // Unique ID
                    ParentProductId: productId,
                    ProductId: productId,
                    Price: "0.00", // Default price, update as needed
                    Position: variants.length + 1,
                    InventoryPolicy: "deny", // Example policy
                    CompareAtPrice: null, // Optional
                    Option1: current[0] || null,
                    Option2: current[1] || null,
                    Option3: current[2] || null,
                    Taxable: true,
                    Barcode: null, // Optional
                    FulfillmentService: "manual",
                    Grams: 0, // Default weight
                    InventoryManagement: null,
                    RequiresShipping: true,
                    Sku: `SKU-${variants.length + 1}`, // Example SKU
                    Weight: 0,
                    WeightUnit: "kg", // Example unit
                    InventoryId: null,
                    InventoryQuantity: 0, // Default quantity
                    OldInventoryQuantity: 0,
                    PresentmentPrices: [], // Optional
                    ImageId: null,
                };
                variants.push(variant);
                return;
            }

            for (let value of options[index].Values) {
                combineOptions(options, index + 1, current.concat(value));
            }
        }

        // Start generating combinations
        combineOptions(options, 0, []);
        return variants;
    }

    // Example usage
    const productId = "1234567890"; // Replace with the actual Product ID
    const options = [
        {
            Name: "Color",
            Position: 1,
            Values: ["Red", "Blue", "Green"],
        },
        {
            Name: "Height",
            Position: 2,
            Values: ["Short", "Medium", "Tall"],
        },
        {
            Name: "Width",
            Position: 3,
            Values: ["Narrow", "Wide"],
        },
    ];

    const variants = generateVariants(productId, options);
    console.log(variants);
</script>